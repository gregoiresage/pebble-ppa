_pebble()  
{
    local command cur prev prev2
    COMPREPLY=()
    command="${COMP_WORDS[0]}"
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    prev2="${COMP_WORDS[COMP_CWORD-2]}"

    if [ "${COMP_CWORD}" == "1" ]; then
    	local opts="sdk build clean install logs screenshot insert-pin delete-pin emu-accel emu-app-config emu-battery emu-bt-connection emu-compass emu-control emu-tap emu-time-format ping login logout repl transcribe data-logging new-project kill wipe analyze-size convert-project"
    	COMPREPLY=( $(compgen -W "$opts" -- $cur) )
    	return 0
    elif [ "${COMP_CWORD}" == "2" ]; then
    	case "$prev" in
    	sdk)
    	    COMPREPLY=( $(compgen -W "list install activate uninstall set-channel include-path" -- $cur) )
    	    return 0
    	    ;;
        data-logging)
            COMPREPLY=( $(compgen -W "list download get-sends-enabled enable-sends disable-sends" -- $cur) )
            return 0
            ;;
        emu-accel)
            COMPREPLY=( $(compgen -W "tilt-left tilt-right tilt-forward tilt-back gravity+x gravity-x gravity+y gravity-y gravity+z gravity-z none custom" -- $cur) )
            return 0
            ;;
    	esac
    fi

    case "$prev" in
    --emulator)
        COMPREPLY=( $(compgen -W "aplite basalt chalk" -- $cur) )
        return 0
        ;;
    --sdk)
        local installedsdks=$(for x in `pebble sdk list | awk '/Installed SDKs:/ {do_print=1} do_print==1 {print} NF==0 {do_print=0}' | grep -oEi '^[0-9.]*(-beta[0-9]+){0,1}'`;  do echo ${x} ; done )
        COMPREPLY=( $(compgen -W "$installedsdks" -- ${cur}) )
        return 0
        ;;
    --logging_level)
        COMPREPLY=( $(compgen -W "SEVERE" -- $cur) )
        return 0
        ;;
    --connected)
        COMPREPLY=( $(compgen -W "yes no" -- $cur) )
        return 0
        ;;
    --direction)
        COMPREPLY=( $(compgen -W "x+ x- y+ y- z+ z-" -- $cur) )
        return 0
        ;;
    --format)
        COMPREPLY=( $(compgen -W "12h 24h" -- $cur) )
        return 0
        ;;
    --file)
        # add html files
        # COMPREPLY=( $(compgen -f -X !*.html -- $cur) )
        # add folders
        # COMPREPLY+=( $(compgen -d -- $cur) )

        # add all files
        COMPREPLY+=( $(compgen -f -- $cur) )
        return 0
        ;;
    --phone|--serial|--qemu|--id|--app-uuid|--session-id|--auth_host_name|--auth_host_port|--percent|--heading)
        return 0
        ;;
    esac

    case "${COMP_WORDS[1]}" in
    sdk)
    	case "$prev" in
    	activate)
        	local installedsdks=$(for x in `pebble sdk list | awk '/Installed SDKs:/ {do_print=1} do_print==1 {print} NF==0 {do_print=0}' | grep -Ei '^[0-9.]*(-beta[0-9]+){0,1}$'`; 	do echo ${x} ; done )
        	COMPREPLY=( $(compgen -W "$installedsdks" -- ${cur}) )
        	return 0
        	;;
        uninstall)
        	local installedsdks=$(for x in `pebble sdk list | awk '/Installed SDKs:/ {do_print=1} do_print==1 {print} NF==0 {do_print=0}' | grep -oEi '^[0-9.]*(-beta[0-9]+){0,1}'`; 	do echo ${x} ; done )
        	COMPREPLY=( $(compgen -W "$installedsdks" -- ${cur}) )
        	return 0
        	;;
    	install)
    	    local availablesdks=$(for x in `pebble sdk list | awk '/Available SDKs:/ {do_print=1} do_print==1 {print} NF==0 {do_print=0}' | grep -oEi '^[0-9.]*(-beta[0-9]+){0,1}'`; 	do echo ${x} ; done )
    	    COMPREPLY=( $(compgen -W "$availablesdks latest" -- ${cur}) )
    	    return 0
    	    ;;
    	# *)
    	# 	return 0
     #    	;;
        esac
        ;;
    esac

    case "$cur" in
    -*)
        local -A flags;

        case "${COMP_WORDS[1]}" in
        logs)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            flags[--color]=ok;
            flags[--no-color]=ok;
            ;;
        install)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            flags[--logs]=ok;
            ;;
        screenshot)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            flags[--no-correction]=ok;
            flags[--no-open]=ok;
            ;;
        data-logging)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            flags[--session-id]=ok;
            ;;
        insert-pin)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--id]=ok;
            flags[--app-uuid]=ok;
            ;;
        delete-pin)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--id]=ok;
            ;;
        emu-*)
            flags[--qemu]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            case "${COMP_WORDS[1]}" in
            emu-accel)
                ;;
            emu-battery)
                flags[--percent]=ok;
                flags[--charging]=ok;
                ;;
            emu-battery)
                flags[--connected]=ok;
                ;;
            emu-compass)
                flags[--heading]=ok;
                flags[--uncalibrated]=ok;
                flags[--calibrating]=ok;
                flags[--calibrated]=ok;
                ;;
            emu-tap)
                flags[--direction]=ok;
                ;;
            emu-time-format)
                flags[--format]=ok;
                ;;
            emu-app-config)
                flags[--file]=ok;
                ;;
            esac
            ;;
        repl)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            ;;
        convert-project)
            flags[--sdk]=ok;
            ;;
        login)
            flags[--auth_host_name]=ok;
            flags[--auth_host_port]=ok;
            flags[--logging_level]=ok;
            flags[--noauth_local_webserver]=ok;
            ;;
        ping)
            flags[--phone]=ok;
            flags[--qemu]=ok;
            flags[--cloudpebble]=ok;
            flags[--emulator]=ok;
            flags[--sdk]=ok;
            flags[--serial]=ok;
            ;;
        build)
            flags[--sdk]=ok;
            ;;
        clean)
            flags[--sdk]=ok;
            ;;
        kill)
            flags[--force]=ok;
            ;;
        wipe)
            flags[--everything]=ok;
            ;;
        new-project)
            flags[--sdk]=ok;
            flags[--simple]=ok;
            flags[--javascript]=ok;
            flags[--worker]=ok;
            ;;
        analyze-size)
            flags[--sdk]=ok;
            flags[--summary]=ok;
            flags[--verbose]=ok;
            ;;
        esac

        for word in "${COMP_WORDS[@]}"
        do
            # remove already used words
            if [ "$word" != "" ]; then
                unset flags[$word];
            fi

            # remove incompatible words
            if [[ "$word" == "--emulator" || "$word" == "--phone" || "$word" == "--qemu" || "$word" == "--serial" || "$word" == "--cloudpebble" ]]  ; then
                unset flags[--emulator];
                unset flags[--phone];
                unset flags[--qemu];
                unset flags[--serial];
                unset flags[--cloudpebble];
            elif [[ "$word" == "--color" || "$word" == "--no-color" ]]  ; then
                unset flags[--color];
                unset flags[--no-color];
            fi
        done

        COMPREPLY=( $(compgen -W "${!flags[*]}" -- $cur) )
        return 0
        ;;
    esac
    return 0
}
complete -o filenames -o bashdefault -F _pebble pebble
